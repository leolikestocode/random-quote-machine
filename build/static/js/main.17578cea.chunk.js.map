{"version":3,"sources":["components/AuthorQuote.jsx","App.js","serviceWorker.js","index.js"],"names":["author","name","text","AuthorQuote","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","index","setState","state","change","previous","bind","assertThisInitialized","_this2","randomIndex","Math","floor","random","map","content","react_default","a","createElement","key","className","id","onClick","href","target","rel","Component","App","components_AuthorQuote","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAEMA,EAAS,CACb,CACEC,KAAM,YACNC,KAAM,6EAER,CACED,KAAM,cACNC,KAAM,0EAER,CACED,KAAM,kBACNC,KAAM,gFAER,CACED,KAAM,gBACNC,KAAM,oEAER,CACED,KAAM,cACNC,KAAM,0EA8DKC,cAzDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAUFI,YAAc,SAACC,GACbR,EAAKS,SAAS,SAACC,GACb,MAAO,CACLC,OAAyB,IAAjBD,EAAMC,OAAe,EAAID,EAAMC,OAAS,EAChDC,SAAUJ,MAZdR,EAAKU,MAAQ,CACXC,OAAQ,EACRC,SAAU,MAGZZ,EAAKO,YAAcP,EAAKO,YAAYM,KAAjBZ,OAAAa,EAAA,EAAAb,CAAAD,IARPA,wEAoBL,IAAAe,EAAAZ,KACHa,EAAcC,KAAKC,MAAsB,EAAhBD,KAAKE,UAGlC,OAFIhB,KAAKO,MAAME,WAAaI,GAAab,KAAKI,YAAYS,GAEnDpB,EAAOwB,IAAI,SAACC,EAASb,GAC1B,OACEQ,IAAgBR,GACdc,EAAAC,EAAAC,cAAA,OACEC,IAAKjB,EACLkB,UAAW,QAAUX,EAAKL,MAAMC,OAChCgB,GAAG,eAEHL,EAAAC,EAAAC,cAAA,KAAGG,GAAG,QAAQN,EAAQvB,MACtBwB,EAAAC,EAAAC,cAAA,QAAMG,GAAG,UAAUN,EAAQxB,MAC3ByB,EAAAC,EAAAC,cAAA,OACEG,GAAG,YACHD,UAAW,QAAUX,EAAKL,MAAMC,OAChCiB,QAAS,kBAAMb,EAAKR,YAAYC,KAHlC,aAOAc,EAAAC,EAAAC,cAAA,KACEG,GAAG,cACHE,KAAM,6CAA+CR,EAAQvB,KAC7D8B,QAASb,EAAKR,YACduB,OAAO,SACPC,IAAI,uBALN,wBA1CcC,mBCbXC,MARf,WACC,OACCX,EAAAC,EAAAC,cAAA,OAAKG,GAAG,aACPL,EAAAC,EAAAC,cAACU,EAAD,QCKiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.17578cea.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst author = [\r\n  {\r\n    name: \"Bob Dylan\",\r\n    text: \"A man is a success if he gets up in the morning and goes to bed at night.\",\r\n  },\r\n  {\r\n    name: \"John Lennon\",\r\n    text: \"Life is what happens to you while you’re busy making other plans.\",\r\n  },\r\n  {\r\n    name: \"Chinese Proverb\",\r\n    text: \"The best time to plant a tree was 20 years ago. The second best time is now.\",\r\n  },\r\n  {\r\n    name: \"George Addair\",\r\n    text: \"Everything you’ve ever wanted is on the other side of fear.\",\r\n  },\r\n  {\r\n    name: \"Farrah Gray\",\r\n    text: \"Build your own dreams, or someone else will hire you to build theirs.\",\r\n  },\r\n];\r\n\r\nclass AuthorQuote extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      change: 1,\r\n      previous: null,\r\n    };\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick = (index) => {\r\n    this.setState((state) => {\r\n      return {\r\n        change: state.change === 5 ? 1 : state.change + 1,\r\n        previous: index,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let randomIndex = Math.floor(Math.random() * 5);\r\n    if (this.state.previous === randomIndex) this.handleClick(randomIndex);\r\n\r\n    return author.map((content, index) => {\r\n      return (\r\n        randomIndex === index && (\r\n          <div\r\n            key={index}\r\n            className={\"color\" + this.state.change}\r\n            id=\"author-data\"\r\n          >\r\n            <p id=\"text\">{content.text}</p>\r\n            <span id=\"author\">{content.name}</span>\r\n            <div\r\n              id=\"new-quote\"\r\n              className={\"color\" + this.state.change}\r\n              onClick={() => this.handleClick(index)}\r\n            >\r\n              New Quote\r\n            </div>\r\n            <a\r\n              id=\"tweet-quote\"\r\n              href={\"https://twitter.com/intent/tweet?hashtags=\" + content.text}\r\n              onClick={this.handleClick}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Tweet this\r\n            </a>\r\n          </div>\r\n        )\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\nexport default AuthorQuote;\r\n","import React from 'react';\r\nimport AuthorQuote from './components/AuthorQuote';\r\nimport './App.css';\r\n\r\nfunction App(){\r\n\treturn (\r\n\t\t<div id='quote-box'>\r\n\t\t\t<AuthorQuote />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}